name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Rust cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build Tauri app
      run: npm run tauri build

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: |
          src-tauri/target/release/bundle/nsis/*.exe
          src-tauri/target/release/bundle/msi/*.msi
          src-tauri/target/release/patient-management-app.exe

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libwebkit2gtk-4.1-dev \
          build-essential \
          curl \
          wget \
          libssl-dev \
          libgtk-3-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: Rust cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Build Tauri app for Linux
      run: npm run tauri build

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-release
        path: |
          src-tauri/target/release/bundle/deb/*.deb
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/patient-management-app

  create-release:
    name: Create Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-release
        path: windows-artifacts

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-release
        path: linux-artifacts

    - name: Display artifacts
      run: |
        echo "Windows artifacts:"
        find windows-artifacts -type f -exec ls -lh {} \;
        echo ""
        echo "Linux artifacts:"
        find linux-artifacts -type f -exec ls -lh {} \;

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Patient Management App ${{ steps.version.outputs.version }}
        body: |
          ## Patient Management System ${{ steps.version.outputs.version }}

          A comprehensive patient management system for medical clinics to manage patient records, appointments, treatments, and billing.

          ### 📦 Downloads

          #### Windows
          - **Installer**: `Patient Management App_${{ steps.version.outputs.version }}_x64-setup.exe` - Recommended installer with Webview2 bootstrapper
          - **Standalone**: `patient-management-app.exe` - Single executable (requires Webview2)
          - **MSI**: `Patient Management App_${{ steps.version.outputs.version }}_x64_en-US.msi` - MSI installer for enterprise deployment

          #### Linux
          - **AppImage**: `Patient Management App.AppImage` - Portable AppImage (works on most Linux distributions)
          - **DEB**: `patient-management-app_${{ steps.version.outputs.version }}_amd64.deb` - Debian/Ubuntu package
          - **Binary**: `patient-management-app` - Standalone binary (requires webkit2gtk)

          ### ✨ Features
          - 🏥 Patient record management
          - 📅 Appointment scheduling
          - 💰 Invoice generation with printing
          - 📊 Analytics and reporting
          - 🔍 Advanced search and filtering
          - 💾 Data backup and restore
          - 🖥️ Cross-platform support

          ### 🔧 System Requirements

          #### Windows
          - Windows 10/11 (x64)
          - Webview2 (automatically installed by setup)

          #### Linux
          - Ubuntu 20.04+ / Debian 10+
          - libwebkit2gtk-4.0-37
          - libayatana-appindicator3-1
          - librsvg2-2

          ### 🚀 Installation

          #### Windows
          1. Download the `.exe` installer
          2. Run the installer
          3. Follow the installation wizard

          #### Linux (Ubuntu/Debian)
          ```bash
          # Using DEB package
          sudo dpkg -i patient-management-app_*.deb
          sudo apt-get install -f  # Install dependencies if needed

          # Using AppImage
          chmod +x Patient\ Management\ App.AppImage
          ./Patient\ Management\ App.AppImage
          ```

          ### 📝 Changelog

          See [CHANGELOG.md](CHANGELOG.md) for detailed release notes.

          ---

          🏥️ Made with ❤️ by BSP Center Clinic
        files: |
          windows-artifacts/**
          linux-artifacts/**
        draft: false
        prerelease: false