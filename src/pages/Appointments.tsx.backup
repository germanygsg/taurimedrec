import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Box from '@mui/joy/Box';
import Card from '@mui/joy/Card';
import Typography from '@mui/joy/Typography';
import Button from '@mui/joy/Button';
import Table from '@mui/joy/Table';
import Input from '@mui/joy/Input';
import Chip from '@mui/joy/Chip';
import Stack from '@mui/joy/Stack';
import CircularProgress from '@mui/joy/CircularProgress';
import IconButton from '@mui/joy/IconButton';
import Visibility from '@mui/icons-material/Visibility';
import Delete from '@mui/icons-material/Delete';
import Add from '@mui/icons-material/Add';
import Search from '@mui/icons-material/Search';
import CalendarMonth from '@mui/icons-material/CalendarMonth';
import ViewColumn from '@mui/icons-material/ViewColumn';
import Dropdown from '@mui/joy/Dropdown';
import Menu from '@mui/joy/Menu';
import MenuButton from '@mui/joy/MenuButton';
import MenuItem from '@mui/joy/MenuItem';
import Checkbox from '@mui/joy/Checkbox';

interface VitalSigns {
  bloodPressure: string;
  respirationRate: number;
  heartRate: number;
  borgScale: number;
}

interface AppointmentTreatment {
  id: number;
  name: string;
  price: number;
}

interface Appointment {
  id: number;
  patientName: string;
  patientId: number;
  date: string;
  vitalSigns: VitalSigns;
  treatments: AppointmentTreatment[];
  totalPrice: number;
  created_at: string;
}

const Appointments: React.FC = () => {
  const navigate = useNavigate();
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [columnVisibility, setColumnVisibility] = useState({
    patient: true,
    date: true,
    vitalSigns: false,
    treatments: false,
    totalPrice: true,
    actions: true
  });

  useEffect(() => {
    loadAppointments();
  }, []);

  const loadAppointments = async () => {
    try {
      const storedAppointments = localStorage.getItem('appointments');
      if (storedAppointments) {
        setAppointments(JSON.parse(storedAppointments));
      } else {
        // Add some default appointments
        const defaultAppointments: Appointment[] = [
          {
            id: 1,
            patientName: 'John Doe',
            patientId: 1,
            date: new Date().toISOString().split('T')[0],
            vitalSigns: {
              bloodPressure: '120/80',
              respirationRate: 16,
              heartRate: 72,
              borgScale: 3
            },
            treatments: [
              { id: 1, name: 'General Consultation', price: 150000 },
              { id: 2, name: 'Blood Test', price: 250000 }
            ],
            totalPrice: 400000,
            created_at: new Date().toISOString()
          }
        ];
        localStorage.setItem('appointments', JSON.stringify(defaultAppointments));
        setAppointments(defaultAppointments);
      }
    } catch (error) {
      setError('Failed to load appointments');
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAppointment = (appointment: Appointment) => {
    if (window.confirm(`Are you sure you want to delete appointment for "${appointment.patientName}"?`)) {
      try {
        const updatedAppointments = appointments.filter(a => a.id !== appointment.id);
        localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
        setAppointments(updatedAppointments);
      } catch (error) {
        setError('Failed to delete appointment');
      }
    }
  };

  const handleColumnVisibilityChange = (column: keyof typeof columnVisibility) => {
    setColumnVisibility(prev => ({
      ...prev,
      [column]: !prev[column]
    }));
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('id-ID', {
      style: 'currency',
      currency: 'IDR',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const formatAppointmentDate = (dateString: string) => {
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${day}/${month}/${year} ${hours}:${minutes}`;
  };

  const filteredAppointments = appointments.filter(appointment =>
    appointment.patientName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getBorgScaleColor = (scale: number) => {
    if (scale <= 3) return 'success';
    if (scale <= 6) return 'warning';
    return 'danger';
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>
        <Stack alignItems="center" spacing={2}>
          <CircularProgress />
          <Typography level="body-lg">Loading appointments...</Typography>
        </Stack>
      </Box>
    );
  }

  return (
    <Box sx={{
      width: '100%',
      height: '100%',
      p: 2,
      boxSizing: 'border-box',
      minWidth: 0
    }}>
      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Typography level="h2">Appointments</Typography>
        <Button
          variant="solid"
          color="primary"
          startDecorator={<Add />}
          onClick={() => navigate('/appointments/new')}
        >
          New Appointment
        </Button>
      </Box>

      {error && (
        <Box sx={{ mb: 3 }}>
          <Typography color="danger">{error}</Typography>
        </Box>
      )}

      {/* Search Bar */}
      <Box sx={{ mb: 3, display: 'flex', gap: 2, alignItems: 'center' }}>
        <Input
          startDecorator={<Search sx={{ color: '#ffffff' }} />}
          placeholder="Search appointments by patient name..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          sx={{
            maxWidth: 400,
            flex: 1,
            color: '#ffffff',
            '&::placeholder': {
              color: '#ffffff !important',
              opacity: 0.7
            },
            '& input': {
              color: '#ffffff !important'
            }
          }}
        />
        <Dropdown>
          <MenuButton
            variant="outlined"
            startDecorator={<ViewColumn sx={{ color: '#ffffff' }} />}
            sx={{ borderRadius: 'sm', color: '#ffffff' }}
          >
            Columns
          </MenuButton>
          <Menu placement="bottom-end">
            <MenuItem onClick={() => handleColumnVisibilityChange('patient')}>
              <Checkbox
                checked={columnVisibility.patient}
                sx={{ mr: 1 }}
              />
              Patient Name
            </MenuItem>
            <MenuItem onClick={() => handleColumnVisibilityChange('date')}>
              <Checkbox
                checked={columnVisibility.date}
                sx={{ mr: 1 }}
              />
              Date
            </MenuItem>
            <MenuItem onClick={() => handleColumnVisibilityChange('vitalSigns')}>
              <Checkbox
                checked={columnVisibility.vitalSigns}
                sx={{ mr: 1 }}
              />
              Vital Signs
            </MenuItem>
            <MenuItem onClick={() => handleColumnVisibilityChange('treatments')}>
              <Checkbox
                checked={columnVisibility.treatments}
                sx={{ mr: 1 }}
              />
              Treatments
            </MenuItem>
            <MenuItem onClick={() => handleColumnVisibilityChange('totalPrice')}>
              <Checkbox
                checked={columnVisibility.totalPrice}
                sx={{ mr: 1 }}
              />
              Total Price
            </MenuItem>
            <MenuItem onClick={() => handleColumnVisibilityChange('actions')}>
              <Checkbox
                checked={columnVisibility.actions}
                sx={{ mr: 1 }}
              />
              Actions
            </MenuItem>
          </Menu>
        </Dropdown>
      </Box>

      {/* Appointments Table */}
      <Card>
        {filteredAppointments.length === 0 ? (
          <Box sx={{ textAlign: 'center', py: 6 }}>
            <Typography level="h4" sx={{ mb: 2, color: '#ffffff' }}>
              {searchTerm ? 'No appointments found' : 'No appointments available'}
            </Typography>
            <Typography level="body-sm" sx={{ mb: 3, color: '#ffffff' }}>
              {searchTerm
                ? 'Try adjusting your search terms'
                : 'Get started by creating your first appointment'
              }
            </Typography>
            {!searchTerm && (
              <Button
                variant="solid"
                color="primary"
                startDecorator={<Add />}
                onClick={() => navigate('/appointments/new')}
              >
                Create First Appointment
              </Button>
            )}
          </Box>
        ) : (
          <Sheet sx={{ overflow: 'auto', borderRadius: 'sm' }}>
            <Table
              aria-labelledby="tableTitle"
              hoverRow
              sx={{
                '& tbody tr:hover': {
                  backgroundColor: 'background.level2',
                },
                '& thead th': {
                  backgroundColor: 'background.level1',
                  fontWeight: 'bold',
                  color: 'text.primary',
                },
              }}
            >
            <thead>
              <tr>
                {columnVisibility.date && <th style={{ width: 150, padding: '12px', color: '#ffffff' }}>Date</th>}
                {columnVisibility.patient && <th style={{ minWidth: 200, padding: '12px', color: '#ffffff' }}>Patient</th>}
                {columnVisibility.vitalSigns && <th style={{ minWidth: 250, padding: '12px', color: '#ffffff' }}>Vital Signs</th>}
                {columnVisibility.treatments && <th style={{ width: 150, padding: '12px', color: '#ffffff' }}>Treatments</th>}
                {columnVisibility.totalPrice && <th style={{ width: 150, padding: '12px', color: '#ffffff' }}>Total Price</th>}
                {columnVisibility.actions && <th style={{ width: 200, padding: '12px', color: '#ffffff' }}>Actions</th>}
              </tr>
            </thead>
            <tbody>
              {filteredAppointments.map((appointment) => (
                <tr key={appointment.id}>
                  {columnVisibility.date && (
                    <td style={{ padding: '12px' }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <CalendarMonth sx={{ fontSize: 16, color: '#ffffff' }} />
                        <Typography
                          component="a"
                          href="#"
                          onClick={(e) => {
                            e.preventDefault();
                            navigate(`/appointments/${appointment.id}`);
                          }}
                          sx={{
                            color: '#ffffff',
                            textDecoration: 'underline',
                            cursor: 'pointer',
                            '&:hover': {
                              color: '#ffffff',
                              textDecoration: 'none',
                              backgroundColor: 'rgba(255, 255, 255, 0.2)',
                              textShadow: '0 0 8px rgba(255, 255, 255, 0.5)'
                            }
                          }}
                        >
                          {formatAppointmentDate(appointment.date)}
                        </Typography>
                      </Box>
                    </td>
                  )}
                  {columnVisibility.patient && (
                    <td style={{ padding: '12px', fontWeight: 500, color: '#ffffff' }}>
                      <Typography level="body-sm" fontWeight="bold">
                        {appointment.patientName}
                      </Typography>
                    </td>
                  )}
                  {columnVisibility.vitalSigns && (
                    <td style={{ padding: '12px' }}>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>
                        <Typography level="body-xs" sx={{ color: '#ffffff' }}>
                          BP: {appointment.vitalSigns.bloodPressure}
                        </Typography>
                        <Typography level="body-xs" sx={{ color: '#ffffff' }}>
                          RR: {appointment.vitalSigns.respirationRate} | HR: {appointment.vitalSigns.heartRate}
                        </Typography>
                        <Chip
                          size="sm"
                          color={getBorgScaleColor(appointment.vitalSigns.borgScale)}
                          variant="soft"
                        >
                          Borg: {appointment.vitalSigns.borgScale}/10
                        </Chip>
                      </Box>
                    </td>
                  )}
                  {columnVisibility.treatments && (
                    <td style={{ padding: '12px' }}>
                      <Typography level="body-sm" sx={{ color: '#ffffff' }}>
                        {appointment.treatments.length} treatment{appointment.treatments.length !== 1 ? 's' : ''}
                      </Typography>
                    </td>
                  )}
                  {columnVisibility.totalPrice && (
                    <td style={{ padding: '12px' }}>
                      <Chip color="success" variant="soft">
                        {formatCurrency(appointment.totalPrice)}
                      </Chip>
                    </td>
                  )}
                  {columnVisibility.actions && (
                    <td style={{ padding: '12px' }}>
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <IconButton
                          size="sm"
                          variant="outlined"
                          color="primary"
                          onClick={() => navigate(`/appointments/${appointment.id}`)}
                        >
                          <Visibility />
                        </IconButton>
                        <IconButton
                          size="sm"
                          variant="outlined"
                          color="danger"
                          onClick={() => handleDeleteAppointment(appointment)}
                        >
                          <Delete />
                        </IconButton>
                      </Box>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </Table>
        </Sheet>
        )}
      </Card>
    </Box>
  );
};

export default Appointments;